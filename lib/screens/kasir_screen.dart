import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'dart:io';
import 'package:open_filex/open_filex.dart';
import 'package:path_provider/path_provider.dart';

class KasirPage extends StatefulWidget {
  const KasirPage({super.key});

  @override
  State<KasirPage> createState() => _KasirPageState();
}

class _KasirPageState extends State<KasirPage> with TickerProviderStateMixin {
  late TabController _mainTab;
  late TabController _payTab;

  // data billing contoh
  final List<Map<String, dynamic>> _billing = [
    {
      "unit": "GINJAL-HIPERTENSI",
      "tipe": "Tindakan",
      "tanggal": "2025-08-12",
      "deskripsi": "Pemeriksaan Rawat Jalan \n Test Psikologi",
      "caraBayar": "UMUM",
      "nominal": 235000,
    },
    {
      "unit": "RADIOLOGI",
      "tipe": "Radiologi",
      "tanggal": "2025-07-28",
      "deskripsi": "Expertise dokter Spesialis Radiologi",
      "caraBayar": "JAMKESDA",
      "nominal": 20000,
    },
  ];

  // form kuitansi
  String _noKuitansi = "Generated by system";
  String _noRegistrasi = "280725020030004105081";
  String _petugasKasir = "SUV Keuangan";
  DateTime _tglKuitansi = DateTime.now();
  DateTime _tglBayar = DateTime.now();

  // data kuitansi tersimpan
  final List<Map<String, dynamic>> _kuitansiList = [];

  @override
  void initState() {
    super.initState();
    _mainTab = TabController(length: 2, vsync: this);
    _payTab = TabController(length: 5, vsync: this);
  }

  @override
  void dispose() {
    _mainTab.dispose();
    _payTab.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.blue[700],
        foregroundColor: Colors.white,
        title: Row(
          children: [
            Icon(MdiIcons.cashRegister, size: 28),
            const SizedBox(width: 12),
            const Text(
              "Kasir",
              style: TextStyle(fontSize: 22, fontWeight: FontWeight.w600),
            ),
          ],
        ),
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(48),
          child: Container(
            color: Colors.blue[700],
            child: TabBar(
              controller: _mainTab,
              labelColor: Colors.white,
              unselectedLabelColor: Colors.white70,
              indicatorColor: Colors.white,
              indicatorWeight: 3,
              labelStyle: const TextStyle(
                fontWeight: FontWeight.w600,
                fontSize: 16,
              ),
              unselectedLabelStyle: const TextStyle(
                fontWeight: FontWeight.w500,
                fontSize: 16,
              ),
              tabs: const [
                Tab(
                  icon: Icon(Icons.receipt_long, size: 20),
                  text: "Detail Billing",
                ),
                Tab(icon: Icon(Icons.payment, size: 20), text: "Kuitansi"),
              ],
            ),
          ),
        ),
      ),
      body: TabBarView(
        controller: _mainTab,
        children: [_buildBilling(), _buildKuitansiForm()],
      ),
    );
  }

  // =================== DETAIL BILLING ===================
  Widget _buildBilling() {
  return SingleChildScrollView(
    child: Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // ===== Info Registrasi =====
          Card(
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                gradient: LinearGradient(
                  colors: [
                    Colors.blue[50] ?? Colors.blue.shade50,
                    Colors.blue[25] ??
                        Colors.blue.shade100.withOpacity(0.5),
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.person_outline,
                          color: Colors.blue[700], size: 24),
                      const SizedBox(width: 8),
                      Text(
                        "Informasi Pasien",
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.blue[800],
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  _buildInfoRow("No. Registrasi", _noRegistrasi),
                  _buildInfoRow("Waktu Registrasi", "28-07-2025 14:15:21"),
                  _buildInfoRow("Nama Pasien", "M NUR HARUN TEST"),
                  _buildInfoRow("Instalasi", "RAWATINAP"),
                  _buildInfoRow("Unit Layanan", "BEDAH DIGESTIF"),
                  _buildInfoRow("Cara Bayar", "Umum"),
                ],
              ),
            ),
          ),
          const SizedBox(height: 24),

          // ===== Header Tabel =====
          Row(
            children: [
              Icon(Icons.list_alt, color: Colors.blue[700], size: 24),
              const SizedBox(width: 8),
              Text(
                "Detail Billing",
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue[800],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),

          // ===== Tabel Billing =====
          Card(
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                color: Colors.white,
              ),
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: DataTable(
                  headingRowColor:
                      WidgetStateProperty.all(Colors.blue[700]),
                  headingTextStyle: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                    fontSize: 14,
                  ),
                  dataTextStyle: const TextStyle(
                    fontSize: 13,
                    color: Colors.black87,
                  ),
                  columnSpacing: 16,
                  headingRowHeight: 50,
                  dataRowMinHeight: 50,
                  dataRowMaxHeight: 70,
                  border: TableBorder.all(
                    color: Colors.grey[300] ?? Colors.grey.shade300,
                    width: 1,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  columns: const [
                    DataColumn(label: Text("No")),
                    DataColumn(label: Text("Unit Layanan")),
                    DataColumn(label: Text("Tipe")),
                    DataColumn(label: Text("Tanggal")),
                    DataColumn(label: Text("Deskripsi")),
                    DataColumn(label: Text("Cara Bayar")),
                    DataColumn(label: Text("No Kuitansi")),
                    DataColumn(label: Text("Nominal")),
                  ],
                  rows: _billing.asMap().entries.map((entry) {
                    final index = entry.key + 1;
                    final b = entry.value;
                    return DataRow(
                      color: WidgetStateProperty.resolveWith((states) {
                        return index % 2 == 0
                            ? Colors.grey[50]
                            : Colors.white;
                      }),
                      cells: [
                        DataCell(Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: Colors.blue[100],
                            borderRadius: BorderRadius.circular(6),
                          ),
                          child: Text(
                            index.toString(),
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.blue[800],
                            ),
                          ),
                        )),
                        DataCell(Text(b["unit"]?.toString() ?? "-")),
                        DataCell(Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: Colors.orange[100],
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            b["tipe"]?.toString() ?? "-",
                            style: TextStyle(
                              color: Colors.orange[800],
                              fontSize: 12,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        )),
                        DataCell(Text(b["tanggal"]?.toString() ?? "-")),
                        DataCell(SizedBox(
                          width: 200,
                          child: Text(
                            b["deskripsi"]?.toString() ?? "-",
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                          ),
                        )),
                        DataCell(Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: (b["caraBayar"]?.toString() ?? "") ==
                                    "UMUM"
                                ? Colors.green[100]
                                : Colors.purple[100],
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            b["caraBayar"]?.toString() ?? "-",
                            style: TextStyle(
                              color:
                                  (b["caraBayar"]?.toString() ?? "") == "UMUM"
                                      ? Colors.green[800]
                                      : Colors.purple[800],
                              fontSize: 12,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        )),
                        const DataCell(Text(
                          "-",
                          style: TextStyle(
                            color: Colors.grey,
                            fontStyle: FontStyle.italic,
                          ),
                        )),
                        DataCell(Text(
                          "Rp ${NumberFormat('#,###').format(b["nominal"] ?? 0)}",
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.green[700],
                            fontSize: 14,
                          ),
                        )),
                      ],
                    );
                  }).toList(),
                ),
              ),
            ),
          ),

          // ===== Total Summary + Tombol Bayar =====
          const SizedBox(height: 16),
          Card(
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                gradient: LinearGradient(
                  colors: [
                    Colors.green[50] ?? Colors.green.shade50,
                    Colors.green[25] ??
                        Colors.green.shade100.withOpacity(0.5),
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        "Total Billing:",
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.green[800],
                        ),
                      ),
                      Text(
                        "Rp ${NumberFormat('#,###').format(_billing.fold<int>(0, (sum, b) => sum + ((b["nominal"] as int?) ?? 0)))}",
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.green[700],
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton.icon(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.teal,
                      padding: const EdgeInsets.symmetric(vertical: 14),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    icon: const Icon(Icons.payment, color: Colors.white),
                    label: const Text(
                      "Bayar",
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    onPressed: () => _showPaymentPopup(context),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    ),
  );
}

// ===== POPUP PEMBAYARAN =====
void _showPaymentPopup(BuildContext context) {
  showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
    ),
    builder: (context) {
      return Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 40,
              height: 5,
              margin: const EdgeInsets.only(bottom: 16),
              decoration: BoxDecoration(
                color: Colors.grey[400],
                borderRadius: BorderRadius.circular(10),
              ),
            ),
            const Text(
              "Pilih Metode Pembayaran",
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            ListTile(
              leading: const Icon(Icons.money, color: Colors.green),
              title: const Text("Tunai"),
              onTap: () {
                Navigator.pop(context);
                // aksi pembayaran tunai
              },
            ),
            ListTile(
              leading: const Icon(Icons.credit_card, color: Colors.blue),
              title: const Text("Kartu Kredit/Debit"),
              onTap: () {
                Navigator.pop(context);
                // aksi pembayaran kartu
              },
            ),
            ListTile(
              leading: const Icon(Icons.account_balance_wallet,
                  color: Colors.orange),
              title: const Text("E-Wallet"),
              onTap: () {
                Navigator.pop(context);
                // aksi pembayaran e-wallet
              },
            ),
            
          ],
        ),
      );
    },
  );
}



  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 2,
            child: Text(
              label,
              style: const TextStyle(
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
          ),
          const Text(": ", style: TextStyle(fontWeight: FontWeight.bold)),
          Expanded(
            flex: 3,
            child: Text(
              value,
              style: const TextStyle(
                color: Colors.black54,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // =================== KUITANSI ===================
  Widget _buildKuitansiForm() {
    return Column(
      children: [
        Container(
          color: Colors.white,
          child: TabBar(
            controller: _payTab,
            isScrollable: true,
            labelColor: Colors.blue[700],
            unselectedLabelColor: Colors.grey[600],
            indicatorColor: Colors.blue[700],
            indicatorWeight: 3,
            labelStyle: const TextStyle(
              fontWeight: FontWeight.w600,
              fontSize: 14,
            ),
            unselectedLabelStyle: const TextStyle(
              fontWeight: FontWeight.w500,
              fontSize: 14,
            ),
            tabs: [
              _buildPaymentTab("UMUM", Icons.person),
              _buildPaymentTab("BPJS", Icons.local_hospital),
              _buildPaymentTab("JAMKESDA", Icons.account_balance),
              _buildPaymentTab("PEMDA LAMPUNG", Icons.location_city),
              _buildPaymentTab("PT. AJ CENTRAL ASIA RAYA", Icons.business),
            ],
          ),
        ),
        Expanded(
          child: TabBarView(
            controller: _payTab,
            children: [
              _buildFormContent("UMUM"),
              _buildFormContent("BPJS"),
              _buildFormContent("JAMKESDA"),
              _buildFormContent("PEMDA LAMPUNG"),
              _buildFormContent("PT. AJ CENTRAL ASIA RAYA"),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPaymentTab(String text, IconData icon) {
    return Tab(
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16),
          const SizedBox(width: 8),
          Flexible(child: Text(text)),
        ],
      ),
    );
  }

  Widget _buildFormContent(String kategori) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // Form Kuitansi Card
          Card(
            color: Colors.white,
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.receipt, color: Colors.blue[700], size: 24),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          "Form Kuitansi ($kategori)",
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.blue[800],
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),

                  _buildFormRow(
                    "No. Kuitansi",
                    Row(
                      children: [
                        Expanded(
                          child: Container(
                            decoration: BoxDecoration(
                              border: Border.all(
                                color: Colors.grey[300] ?? Colors.grey.shade300,
                              ),
                              borderRadius: BorderRadius.circular(8),
                              color: Colors.grey[100],
                            ),
                            child: TextField(
                              controller: TextEditingController(
                                text: _noKuitansi,
                              ),
                              enabled: false,
                              style: const TextStyle(
                                fontWeight: FontWeight.w500,
                                color: Colors.black54,
                              ),
                              decoration: const InputDecoration(
                                contentPadding: EdgeInsets.all(12),
                                border: InputBorder.none,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 12),
                        ElevatedButton.icon(
                          onPressed: () {
                            setState(() {
                              _noKuitansi = DateFormat(
                                "yyyyMMddHHmmss",
                              ).format(DateTime.now());
                            });
                          },
                          icon: const Icon(Icons.refresh, size: 18),
                          label: const Text("Generate"),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue[700],
                            foregroundColor: Colors.white,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                            padding: const EdgeInsets.symmetric(
                              horizontal: 16,
                              vertical: 12,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),

                  _buildFormRow(
                    "No. Registrasi",
                    _buildReadOnlyField(_noRegistrasi),
                  ),

                  _buildFormRow(
                    "Petugas Kasir",
                    _buildReadOnlyField(_petugasKasir),
                  ),

                  _buildFormRow(
                    "Tanggal Kuitansi",
                    _buildDateButton(_tglKuitansi, (picked) {
                      setState(() => _tglKuitansi = picked);
                    }),
                  ),

                  _buildFormRow(
                    "Tanggal Bayar",
                    _buildDateButton(_tglBayar, (picked) {
                      setState(() => _tglBayar = picked);
                    }),
                  ),
                ],
              ),
            ),
          ),

          const SizedBox(height: 16),

          // Tombol Simpan
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: () {
                setState(() {
                  _kuitansiList.add({
                    "no": _noKuitansi,
                    "registrasi": _noRegistrasi,
                    "pasien": "M NUR HARUN TEST",
                    "kasir": _petugasKasir,
                    "terbilang": "Dua ratus lima puluh lima ribu rupiah",
                    "kategori": kategori,
                    "tanggal": _tglKuitansi,
                    "total": _billing.fold<int>(
                      0,
                      (sum, b) => sum + ((b["nominal"] as int?) ?? 0),
                    ),
                    "billing":
                        _billing
                            .where(
                              (b) =>
                                  (b["nominal"] as int?) != null &&
                                  (b["nominal"] as int) > 0,
                            )
                            .toList(),
                  });
                });

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Row(
                      children: [
                        const Icon(Icons.check_circle, color: Colors.white),
                        const SizedBox(width: 12),
                        Text("Kuitansi $kategori berhasil disimpan!"),
                      ],
                    ),
                    backgroundColor: Colors.green[600],
                    behavior: SnackBarBehavior.floating,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                );
              },
              icon: const Icon(Icons.save, size: 20),
              label: const Text(
                "Simpan Kuitansi",
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green[600],
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                padding: const EdgeInsets.symmetric(vertical: 16),
                elevation: 2,
              ),
            ),
          ),

          const SizedBox(height: 24),

          // Tabel Kuitansi - dengan tinggi yang dibatasi
          SizedBox(
            height: 400, // Atau tinggi yang sesuai kebutuhan Anda
            child: _buildKuitansiTable(),
          ),

          const SizedBox(height: 20), // Spacing tambahan di bawah
        ],
      ),
    );
  }

  Widget _buildReadOnlyField(String value) {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey[300] ?? Colors.grey.shade300),
        borderRadius: BorderRadius.circular(8),
        color: Colors.grey[100],
      ),
      child: TextField(
        controller: TextEditingController(text: value),
        enabled: false,
        style: const TextStyle(
          fontWeight: FontWeight.w500,
          color: Colors.black54,
        ),
        decoration: const InputDecoration(
          contentPadding: EdgeInsets.all(12),
          border: InputBorder.none,
        ),
      ),
    );
  }

  Widget _buildDateButton(DateTime date, Function(DateTime) onDateSelected) {
    return InkWell(
      onTap: () async {
        final picked = await showDatePicker(
          context: context,
          initialDate: date,
          firstDate: DateTime(2020),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: ColorScheme.light(
                  primary: Colors.blue[700] ?? Colors.blue.shade700,
                  onPrimary: Colors.white,
                  surface: Colors.white,
                  onSurface: Colors.black,
                ),
              ),
              child: child!,
            );
          },
        );
        if (picked != null) onDateSelected(picked);
      },
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey[300] ?? Colors.grey.shade300),
          borderRadius: BorderRadius.circular(8),
          color: Colors.white,
        ),
        child: Row(
          children: [
            Icon(Icons.calendar_today, color: Colors.blue[700], size: 20),
            const SizedBox(width: 12),
            Text(
              DateFormat("dd MMMM yyyy").format(date),
              style: const TextStyle(fontWeight: FontWeight.w500, fontSize: 14),
            ),
            const Spacer(),
            Icon(Icons.arrow_drop_down, color: Colors.grey[600]),
          ],
        ),
      ),
    );
  }

  Widget _buildKuitansiTable() {
    if (_kuitansiList.isEmpty) {
      return Card(
        elevation: 2,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: Container(
          height: 300,
          padding: const EdgeInsets.all(40),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            color: Colors.grey[50],
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.receipt_long_outlined,
                size: 64,
                color: Colors.grey[400],
              ),
              const SizedBox(height: 16),
              Text(
                "Belum ada kuitansi tersimpan",
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.grey[600],
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                "Kuitansi yang disimpan akan muncul di sini",
                style: TextStyle(fontSize: 14, color: Colors.grey[500]),
              ),
            ],
          ),
        ),
      );
    }

    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue[700],
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(12),
                topRight: Radius.circular(12),
              ),
            ),
            child: const Row(
              children: [
                Icon(Icons.list_alt, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Text(
                  "Daftar Kuitansi Tersimpan",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: SingleChildScrollView(
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: ConstrainedBox(
                  constraints: BoxConstraints(
                    minWidth: MediaQuery.of(context).size.width - 32,
                  ),
                  child: DataTable(
                    headingRowColor: WidgetStateProperty.all(Colors.grey[100]),
                    headingTextStyle: TextStyle(
                      color: Colors.blue[800],
                      fontWeight: FontWeight.w600,
                      fontSize: 14,
                    ),
                    dataTextStyle: const TextStyle(
                      fontSize: 13,
                      color: Colors.black87,
                    ),
                    columnSpacing: 20,
                    headingRowHeight: 50,
                    dataRowMinHeight: 60,
                    dataRowMaxHeight: 80,
                    columns: const [
                      DataColumn(label: Text("No Kuitansi")),
                      DataColumn(label: Text("Kategori")),
                      DataColumn(label: Text("Tanggal")),
                      DataColumn(label: Text("Total")),
                      DataColumn(label: Text("Aksi")),
                    ],
                    rows:
                        _kuitansiList.asMap().entries.map((entry) {
                          final index = entry.key;
                          final data = entry.value;
                          return DataRow(
                            color: WidgetStateProperty.resolveWith((states) {
                              return index % 2 == 0
                                  ? Colors.grey[50]
                                  : Colors.white;
                            }),
                            cells: [
                              DataCell(
                                Text(
                                  data["no"]?.toString() ?? "-",
                                  style: const TextStyle(
                                    fontFamily: 'monospace',
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ),
                              DataCell(
                                Container(
                                  padding: const EdgeInsets.symmetric(
                                    horizontal: 8,
                                    vertical: 4,
                                  ),
                                  decoration: BoxDecoration(
                                    color: _getKategoriColor(
                                      data["kategori"]?.toString() ?? "",
                                    ),
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  child: Text(
                                    data["kategori"]?.toString() ?? "-",
                                    style: TextStyle(
                                      color: _getKategoriTextColor(
                                        data["kategori"]?.toString() ?? "",
                                      ),
                                      fontSize: 12,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),
                              ),
                              DataCell(
                                Text(
                                  data["tanggal"] != null
                                      ? DateFormat(
                                        "dd/MM/yyyy",
                                      ).format(data["tanggal"] as DateTime)
                                      : "-",
                                  style: const TextStyle(
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ),
                              DataCell(
                                Text(
                                  "Rp ${NumberFormat('#,###').format(data["total"] ?? 0)}",
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    color: Colors.green[700],
                                  ),
                                ),
                              ),
                              DataCell(
                                Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    IconButton(
                                      icon: Icon(
                                        Icons.info_outline,
                                        color: Colors.blue[600],
                                        size: 20,
                                      ),
                                      onPressed:
                                          () => _showDetail(context, data),
                                      tooltip: "Detail",
                                      style: IconButton.styleFrom(
                                        backgroundColor: Colors.blue[50],
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(
                                            8,
                                          ),
                                        ),
                                      ),
                                    ),
                                    const SizedBox(width: 8),
                                    IconButton(
                                      icon: Icon(
                                        Icons.picture_as_pdf,
                                        color: Colors.red[600],
                                        size: 20,
                                      ),
                                      onPressed:
                                          () => _downloadPdf(context, data),
                                      tooltip: "Download PDF",
                                      style: IconButton.styleFrom(
                                        backgroundColor: Colors.red[50],
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(
                                            8,
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          );
                        }).toList(),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Color _getKategoriColor(String kategori) {
    switch (kategori) {
      case "UMUM":
        return Colors.green[100] ?? Colors.green.shade100;
      case "BPJS":
        return Colors.blue[100] ?? Colors.blue.shade100;
      case "JAMKESDA":
        return Colors.orange[100] ?? Colors.orange.shade100;
      case "PEMDA LAMPUNG":
        return Colors.purple[100] ?? Colors.purple.shade100;
      case "PT. AJ CENTRAL ASIA RAYA":
        return Colors.teal[100] ?? Colors.teal.shade100;
      default:
        return Colors.grey[100] ?? Colors.grey.shade100;
    }
  }

  Color _getKategoriTextColor(String kategori) {
    switch (kategori) {
      case "UMUM":
        return Colors.green[800] ?? Colors.green.shade800;
      case "BPJS":
        return Colors.blue[800] ?? Colors.blue.shade800;
      case "JAMKESDA":
        return Colors.orange[800] ?? Colors.orange.shade800;
      case "PEMDA LAMPUNG":
        return Colors.purple[800] ?? Colors.purple.shade800;
      case "PT. AJ CENTRAL ASIA RAYA":
        return Colors.teal[800] ?? Colors.teal.shade800;
      default:
        return Colors.grey[800] ?? Colors.grey.shade800;
    }
  }

  void _showDetail(BuildContext context, Map<String, dynamic> data) {
    final currency = NumberFormat.currency(
      locale: "id",
      symbol: "Rp ",
      decimalDigits: 0,
    );

    showDialog(
      context: context,
      builder:
          (_) => AlertDialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            title: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    Colors.blue[600] ?? Colors.blue.shade600,
                    Colors.blue[700] ?? Colors.blue.shade700,
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Row(
                children: [
                  const Icon(Icons.receipt_long, color: Colors.white, size: 28),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          "Detail Kuitansi",
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          data['no']?.toString() ?? "-",
                          style: const TextStyle(
                            color: Colors.white70,
                            fontSize: 14,
                            fontFamily: 'monospace',
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            content: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  _buildDetailTile(
                    Icons.category,
                    "Kategori",
                    data['kategori']?.toString() ?? "-",
                    Colors.indigo,
                  ),
                  _buildDetailTile(
                    Icons.person,
                    "Nama Pasien",
                    data['pasien']?.toString() ?? "-",
                    Colors.teal,
                  ),
                  _buildDetailTile(
                    Icons.badge,
                    "No. Registrasi",
                    data['registrasi']?.toString() ?? "-",
                    Colors.orange,
                  ),
                  _buildDetailTile(
                    Icons.person_outline,
                    "Petugas Kasir",
                    data['kasir']?.toString() ?? "-",
                    Colors.purple,
                  ),
                  _buildDetailTile(
                    Icons.date_range,
                    "Tanggal",
                    data['tanggal'] != null
                        ? DateFormat(
                          "dd MMMM yyyy",
                        ).format(data['tanggal'] as DateTime)
                        : "-",
                    Colors.green,
                  ),

                  const SizedBox(height: 16),
                  const Divider(thickness: 2),

                  Row(
                    children: [
                      Icon(Icons.list_alt, color: Colors.blue[700], size: 20),
                      const SizedBox(width: 8),
                      Text(
                        "Detail Billing",
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                          color: Colors.blue[800],
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),

                  ...(data["billing"] as List<dynamic>? ?? []).map<Widget>((b) {
                    final billingItem = b as Map<String, dynamic>;
                    return Container(
                      margin: const EdgeInsets.only(bottom: 8),
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.grey[50],
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(
                          color: Colors.grey[200] ?? Colors.grey.shade200,
                        ),
                      ),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  billingItem["deskripsi"]?.toString() ?? "-",
                                  style: const TextStyle(
                                    fontWeight: FontWeight.w500,
                                    fontSize: 14,
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Row(
                                  children: [
                                    Icon(
                                      Icons.local_hospital,
                                      size: 14,
                                      color: Colors.grey[600],
                                    ),
                                    const SizedBox(width: 4),
                                    Text(
                                      billingItem["unit"]?.toString() ?? "-",
                                      style: TextStyle(
                                        fontSize: 12,
                                        color: Colors.grey[600],
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(width: 8),
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 8,
                              vertical: 4,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.green[100],
                              borderRadius: BorderRadius.circular(6),
                            ),
                            child: Text(
                              currency.format(billingItem["nominal"] ?? 0),
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.green[800],
                                fontSize: 13,
                              ),
                            ),
                          ),
                        ],
                      ),
                    );
                  }).toList(),

                  const SizedBox(height: 8),
                  const Divider(thickness: 2),

                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          Colors.green[50] ?? Colors.green.shade50,
                          Colors.green[100] ?? Colors.green.shade100,
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            Icon(
                              Icons.monetization_on,
                              color: Colors.green[700],
                              size: 24,
                            ),
                            const SizedBox(width: 8),
                            Text(
                              "Total Pembayaran",
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 12,
                                color: Colors.green[800],
                              ),
                            ),
                          ],
                        ),
                        Text(
                          currency.format(data["total"] ?? 0),
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.green[700],
                            fontSize: 16,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            actions: [
              TextButton.icon(
                onPressed: () => Navigator.pop(context),
                icon: const Icon(Icons.close),
                label: const Text("Tutup"),
                style: TextButton.styleFrom(foregroundColor: Colors.grey[700]),
              ),
              ElevatedButton.icon(
                onPressed: () {
                  Navigator.pop(context);
                  _downloadPdf(context, data);
                },
                icon: const Icon(Icons.download, size: 18),
                label: const Text("Download PDF"),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue[600],
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
              ),
            ],
          ),
    );
  }

  Widget _buildDetailTile(
    IconData icon,
    String title,
    String subtitle,
    Color color,
  ) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      child: ListTile(
        dense: true,
        contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        tileColor: color.withOpacity(0.1),
        leading: Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: color.withOpacity(0.2),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: color, size: 20),
        ),
        title: Text(
          title,
          style: const TextStyle(
            fontSize: 12,
            fontWeight: FontWeight.w500,
            color: Colors.black54,
          ),
        ),
        subtitle: Text(
          subtitle,
          style: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: Colors.black87,
          ),
        ),
      ),
    );
  }

  Future<void> _downloadPdf(
    BuildContext context,
    Map<String, dynamic> data,
  ) async {
    // Show loading dialog
    showDialog(
      context: context,
      barrierDismissible: false,
      builder:
          (_) => const AlertDialog(
            content: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircularProgressIndicator(),
                SizedBox(width: 20),
                Text("Membuat PDF..."),
              ],
            ),
          ),
    );

    try {
      final pdf = pw.Document();

      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          build: (pw.Context ctx) {
            return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                // Kop Surat
                pw.Text(
                  "PEMERINTAH PROVINSI LAMPUNG",
                  style: pw.TextStyle(
                    fontSize: 12,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.Text(
                  "RSUD Abdul Moeloek",
                  style: pw.TextStyle(
                    fontSize: 14,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.Text("TELP 0721-703312", style: pw.TextStyle(fontSize: 10)),
                pw.Text("BANDAR LAMPUNG", style: pw.TextStyle(fontSize: 10)),
                pw.SizedBox(height: 16),

                // Judul & Info Kanan
                // Judul + Keterangan kanan
                // Bagian Judul + KASA + No
                pw.Stack(
                  children: [
                    // Judul di tengah
                    pw.Align(
                      alignment: pw.Alignment.topCenter,
                      child: pw.Column(
                        children: [
                          pw.Text(
                            "TANDA BUKTI PEMBAYARAN",
                            style: pw.TextStyle(
                              fontSize: 14,
                              fontWeight: pw.FontWeight.bold,
                            ),
                          ),
                          pw.Text(
                            "PERGUB NOMOR 6 TAHUN 2019",
                            style: pw.TextStyle(fontSize: 10),
                          ),
                        ],
                      ),
                    ),

                    // Info kanan
                    pw.Align(
                      alignment: pw.Alignment.topRight,
                      child: pw.Column(
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text("KASA I", style: pw.TextStyle(fontSize: 10)),
                          pw.Text(
                            "No. ${data['no'] ?? '-'}",
                            style: pw.TextStyle(fontSize: 10),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),

                // Divider full width
                pw.Divider(thickness: 1, color: PdfColors.black),
                pw.SizedBox(height: 16),

                // Narasi penerimaan uang
                pw.Text(
                  "Bendahara Penerimaan / Bendahara Penerimaan Pembantu KASA I / KASA II / KASA III",
                  style: pw.TextStyle(fontSize: 10),
                ),
                pw.SizedBox(height: 4),
                pw.Text(
                  "Telah menerima uang sebesar Rp ${NumberFormat('#,###').format(data['total'] ?? 0)}",
                  style: pw.TextStyle(
                    fontSize: 10,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.Text(
                  "(${data['terbilang'] ?? '-'})",
                  style: pw.TextStyle(
                    fontSize: 10,
                    fontStyle: pw.FontStyle.italic,
                  ),
                ),
                pw.SizedBox(height: 8),
                pw.Text(
                  "Dari Sdr/Sdri : ${data['pasien'] ?? '-'}",
                  style: pw.TextStyle(fontSize: 10),
                ),
                pw.Text(
                  "Sebagai Pembayaran OS Nama : ${data['pasien'] ?? '-'}",
                  style: pw.TextStyle(fontSize: 10),
                ),
                pw.SizedBox(height: 16),

                // Tabel Rincian
                pw.Table(
                  border: null,
                  columnWidths: {
                    0: const pw.FlexColumnWidth(3),
                    1: const pw.FlexColumnWidth(1),
                  },
                  children: [
                    ...(data["billing"] as List<dynamic>? ?? []).map((item) {
                      return pw.TableRow(
                        decoration: const pw.BoxDecoration(
                          border: pw.Border(
                            bottom: pw.BorderSide(
                              color: PdfColors.grey,
                              width: 0.5,
                            ),
                          ),
                        ),
                        children: [
                          pw.Padding(
                            padding: const pw.EdgeInsets.symmetric(vertical: 2),
                            child: pw.Text(
                              item["deskripsi"] ?? "",
                              style: pw.TextStyle(fontSize: 10),
                            ),
                          ),
                          pw.Align(
                            alignment: pw.Alignment.centerRight,
                            child: pw.Row(
                              mainAxisSize: pw.MainAxisSize.min,
                              children: [
                                pw.Text(
                                  "Rp.",
                                  style: pw.TextStyle(
                                    fontSize: 10,
                                    color: PdfColors.blue900,
                                    fontWeight: pw.FontWeight.bold,
                                  ),
                                ),
                                pw.SizedBox(width: 8),

                                // Nominal selalu rata kanan dengan lebar tetap
                                pw.Container(
                                  width:
                                      60, // 👉 atur sesuai panjang angka terbesar
                                  alignment: pw.Alignment.centerRight,
                                  child: pw.Text(
                                    NumberFormat(
                                      '#,###',
                                    ).format(item["nominal"] ?? 0),
                                    style: pw.TextStyle(
                                      fontSize: 10,
                                      fontWeight: pw.FontWeight.bold,
                                      color: PdfColors.blue900,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      );
                    }),
                  ],
                ),
                pw.SizedBox(height: 16),

                // Total
                pw.Row(
                  mainAxisAlignment: pw.MainAxisAlignment.end,
                  children: [
                    pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.end,
                      children: [
                        // Biaya
                        pw.Row(
                          mainAxisSize: pw.MainAxisSize.min,
                          children: [
                            pw.Text(
                              "Biaya :",
                              style: pw.TextStyle(
                                fontSize: 10,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                            pw.SizedBox(width: 8),
                            pw.Text(
                              "Rp.",
                              style: pw.TextStyle(
                                fontSize: 10,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                            pw.SizedBox(width: 8),
                            pw.Container(
                              width: 70, // atur sesuai panjang angka terbesar
                              alignment: pw.Alignment.centerRight,
                              child: pw.Text(
                                NumberFormat(
                                  '#,###',
                                ).format(data["total"] ?? 0),
                                style: pw.TextStyle(
                                  fontSize: 10,
                                  fontWeight: pw.FontWeight.bold,
                                  color: PdfColors.red,
                                ),
                              ),
                            ),
                          ],
                        ),

                        // Pembayaran
                        pw.Row(
                          mainAxisSize: pw.MainAxisSize.min,
                          children: [
                            pw.Text(
                              "Pembayaran :",
                              style: pw.TextStyle(
                                fontSize: 10,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                            pw.SizedBox(width: 8),
                            pw.Text(
                              "Rp.",
                              style: pw.TextStyle(
                                fontSize: 10,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                            pw.SizedBox(width: 8),
                            pw.Container(
                              width: 70,
                              alignment: pw.Alignment.centerRight,
                              child: pw.Text(
                                NumberFormat(
                                  '#,###',
                                ).format(data["dibayar"] ?? 0),
                                style: pw.TextStyle(
                                  fontSize: 10,
                                  fontWeight: pw.FontWeight.bold,
                                  color: PdfColors.red,
                                ),
                              ),
                            ),
                          ],
                        ),

                        // Sisa
                        pw.Row(
                          mainAxisSize: pw.MainAxisSize.min,
                          children: [
                            pw.Text(
                              "Sisa :",
                              style: pw.TextStyle(
                                fontSize: 10,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                            pw.SizedBox(width: 8),
                            pw.Text(
                              "Rp.",
                              style: pw.TextStyle(
                                fontSize: 10,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                            pw.SizedBox(width: 8),
                            pw.Container(
                              width: 70,
                              alignment: pw.Alignment.centerRight,
                              child: pw.Text(
                                NumberFormat('#,###').format(data["sisa"] ?? 0),
                                style: pw.TextStyle(
                                  fontSize: 10,
                                  fontWeight: pw.FontWeight.bold,
                                  color: PdfColors.red,
                                ),
                              ),
                            ),
                          ],
                        ),

                        // Total Tagihan
                        pw.Row(
                          mainAxisSize: pw.MainAxisSize.min,
                          children: [
                            pw.Text(
                              "Total Tagihan :",
                              style: pw.TextStyle(
                                fontSize: 10,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                            pw.SizedBox(width: 8),
                            pw.Text(
                              "Rp.",
                              style: pw.TextStyle(
                                fontSize: 10,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                            pw.SizedBox(width: 8),
                            pw.Container(
                              width: 70,
                              alignment: pw.Alignment.centerRight,
                              child: pw.Text(
                                NumberFormat(
                                  '#,###',
                                ).format(data["total"] ?? 0),
                                style: pw.TextStyle(
                                  fontSize: 12,
                                  fontWeight: pw.FontWeight.bold,
                                  color: PdfColors.red,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
                pw.SizedBox(height: 40),

                // Tanda tangan
                pw.Row(
                  mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                  children: [
                    _buildPdfSignature(
                      "Mengetahui",
                      "Bendahara Penerimaan",
                      "",
                    ),
                    _buildPdfSignature("Petugas", "Kasir", data['kasir'] ?? ""),
                    _buildPdfSignature(
                      "Tanggal diterima",
                      DateFormat("dd-MM-yyyy").format(DateTime.now()),
                      "Penyetor",
                    ),
                  ],
                ),
              ],
            );
          },
        ),
      );

      // Simpan file ke Documents
      final dir = await getApplicationDocumentsDirectory();
      final file = File("${dir.path}/kuitansi_${data['no'] ?? 'unknown'}.pdf");
      await file.writeAsBytes(await pdf.save());

      // Close loading dialog
      if (context.mounted) Navigator.pop(context);

      // Buka file otomatis
      await OpenFilex.open(file.path);

      // Kasih notifikasi success
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.check_circle, color: Colors.white),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      const Text(
                        "PDF berhasil dibuat!",
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                      Text(
                        "Disimpan di: ${file.path}",
                        style: const TextStyle(fontSize: 12),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.green[600],
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            duration: const Duration(seconds: 4),
          ),
        );
      }
    } catch (e) {
      // Close loading dialog
      if (context.mounted) Navigator.pop(context);

      // Show error
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.error, color: Colors.white),
                const SizedBox(width: 12),
                Text("Error membuat PDF: $e"),
              ],
            ),
            backgroundColor: Colors.red[600],
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        );
      }
    }
  }

  pw.Widget _buildPdfInfoRow(String label, String value) {
    return pw.Padding(
      padding: const pw.EdgeInsets.symmetric(vertical: 2),
      child: pw.Row(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.SizedBox(
            width: 120,
            child: pw.Text(
              label,
              style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.bold),
            ),
          ),
          pw.Text(
            ": ",
            style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.bold),
          ),
          pw.Expanded(
            child: pw.Text(value, style: const pw.TextStyle(fontSize: 10)),
          ),
        ],
      ),
    );
  }

  pw.Widget _buildPdfTableHeader(String text) {
    return pw.Padding(
      padding: const pw.EdgeInsets.all(8),
      child: pw.Text(
        text,
        style: pw.TextStyle(
          fontSize: 10,
          fontWeight: pw.FontWeight.bold,
          color: PdfColors.white,
        ),
        textAlign: pw.TextAlign.center,
      ),
    );
  }

  pw.Widget _buildPdfTableCell(String text, [bool center = false]) {
    return pw.Padding(
      padding: const pw.EdgeInsets.all(8),
      child: pw.Text(
        text,
        style: const pw.TextStyle(fontSize: 9),
        textAlign: center ? pw.TextAlign.center : pw.TextAlign.left,
      ),
    );
  }

  pw.Widget _buildPdfSignature(String title, String subtitle, String name) {
    return pw.Column(
      children: [
        pw.Text(
          title,
          style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.bold),
        ),
        pw.Text(subtitle, style: const pw.TextStyle(fontSize: 9)),
        pw.SizedBox(height: 40),
        pw.Container(width: 100, height: 1, color: PdfColors.black),
        pw.SizedBox(height: 4),
        pw.Text(
          name.isEmpty ? "(.....................)" : "($name)",
          style: const pw.TextStyle(fontSize: 9),
        ),
      ],
    );
  }

  Widget _buildFormRow(String label, Widget field) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 12),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            label,
            style: TextStyle(
              fontWeight: FontWeight.w600,
              fontSize: 14,
              color: Colors.blue[800],
            ),
          ),
          const SizedBox(height: 8),
          field,
        ],
      ),
    );
  }
}
